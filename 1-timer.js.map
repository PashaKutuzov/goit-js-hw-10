{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\n\n\n\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nlet userSelectedDate = null; // Змінна для збереження обраної дати\nlet countdownInterval = null;\n\nconst startButton = document.querySelector(\"[data-start]\");\nconst dateTimePicker = document.querySelector(\"#datetime-picker\");\nconst daysValue = document.querySelector(\"[data-days]\");\nconst hoursValue = document.querySelector(\"[data-hours]\");\nconst minutesValue = document.querySelector(\"[data-minutes]\");\nconst secondsValue = document.querySelector(\"[data-seconds]\");\n\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const selectedDate = selectedDates[0]; \n\n        if (selectedDate <= new Date()) {\n            iziToast.error({\n              title: \"Error\",\n              message: \"Please choose a date in the future\",\n            });\n            startButton.disabled = true; // Блокуємо кнопку\n          } else {\n            userSelectedDate = selectedDate;\n            startButton.disabled = false; // Робимо кнопку активною\n          }\n        },\n      };\n      \n    flatpickr(\"#datetime-picker\", options);\n\n    window.addEventListener(\"load\", () => {\n        startButton.disabled = true; // Кнопка завжди неактивна після оновлення\n      });\n\nstartButton.addEventListener(\"click\", () => {\n    \n        if (!userSelectedDate) return;\n        \n        if (countdownInterval) {\n            clearInterval(countdownInterval);\n          }\n        startButton.disabled = true; \n        dateTimePicker.disabled = true;\n        startCountdown(userSelectedDate);\n      \n      });\n\n\n\n\n\n    \n      \n      function startCountdown(targetDate){\n        countdownInterval = setInterval(() => {\n            const now = new Date();\n            const timeDifference = targetDate - now;\n\n\n            if (timeDifference <= 0){\nclearInterval(countdownInterval)\nupdateTimerDisplay(0, 0, 0, 0);\niziToast.success({\n    title: \"Finished\",\n    message: \"Time's up!\",\n      });\n\n      dateTimePicker.disabled = false;\nstartButton.disabled = true;\nreturn;\n     }    \n        \n     const { days, hours, minutes, seconds } = convertMs(timeDifference);\n     updateTimerDisplay(days, hours, minutes, seconds);\n\n        }, 1000);\n      }\n\n\n\n\n\n\n\n\n      function updateTimerDisplay(days, hours, minutes, seconds) {\n        daysValue.textContent = String(days);\n        hoursValue.textContent = addLeadingZero(hours);\n        minutesValue.textContent = addLeadingZero(minutes);\n        secondsValue.textContent = addLeadingZero(seconds);\n      }\n\n\n\n\n\n\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}\n\n\n\n      function convertMs(ms) {\n        // Number of milliseconds per unit of time\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n      \n        // Remaining days\n        const days = Math.floor(ms / day);\n        // Remaining hours\n        const hours = Math.floor((ms % day) / hour);\n        // Remaining minutes\n        const minutes = Math.floor(((ms % day) % hour) / minute);\n        // Remaining seconds\n        const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n      \n        return { days, hours, minutes, seconds };\n      }\n      \n      console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n      console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n      console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n      "],"names":["userSelectedDate","countdownInterval","startButton","dateTimePicker","daysValue","hoursValue","minutesValue","secondsValue","options","selectedDates","selectedDate","iziToast","flatpickr","startCountdown","targetDate","timeDifference","updateTimerDisplay","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"+IAUA,IAAIA,EAAmB,KACnBC,EAAoB,KAExB,MAAMC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAGtDC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAeD,EAAc,CAAC,EAEhCC,GAAgB,IAAI,MACpBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACvB,CAAa,EACDT,EAAY,SAAW,KAEvBF,EAAmBU,EACnBR,EAAY,SAAW,GAE1B,CACT,EAEIU,EAAU,mBAAoBJ,CAAO,EAErC,OAAO,iBAAiB,OAAQ,IAAM,CAClCN,EAAY,SAAW,EAC/B,CAAO,EAEPA,EAAY,iBAAiB,QAAS,IAAM,CAE/BF,IAEDC,GACA,cAAcA,CAAiB,EAEnCC,EAAY,SAAW,GACvBC,EAAe,SAAW,GAC1BU,EAAeb,CAAgB,EAEvC,CAAO,EAQD,SAASa,EAAeC,EAAW,CACjCb,EAAoB,YAAY,IAAM,CAElC,MAAMc,EAAiBD,EADX,IAAI,KAIhB,GAAIC,GAAkB,EAAE,CACpC,cAAcd,CAAiB,EAC/Be,EAAmB,EAAG,EAAG,EAAG,CAAC,EAC7BL,EAAS,QAAQ,CACb,MAAO,WACP,QAAS,YACb,CAAO,EAEDR,EAAe,SAAW,GAChCD,EAAY,SAAW,GACvB,MACM,CAED,KAAM,CAAE,KAAAe,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAc,EAClEC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CAE5C,EAAE,GAAI,CACR,CASD,SAASJ,EAAmBC,EAAMC,EAAOC,EAASC,EAAS,CACzDhB,EAAU,YAAc,OAAOa,CAAI,EACnCZ,EAAW,YAAciB,EAAeJ,CAAK,EAC7CZ,EAAa,YAAcgB,EAAeH,CAAO,EACjDZ,EAAa,YAAce,EAAeF,CAAO,CAClD,CAQP,SAASE,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAIM,SAASF,EAAUG,EAAI,CAQrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAE1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EAEpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EAEjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,QAAQ,IAAIC,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}